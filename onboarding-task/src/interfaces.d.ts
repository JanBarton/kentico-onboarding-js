import { List, Map } from 'immutable';
/**
 * Action generated by user
 */
export interface IAction<T> {
  /** Type of action */
  type: string;
  /** Data passed with action */
  payload: T;
}

/* Payload interfaces */

export interface ItemPayload {
  item: IListItemData;
}

export interface IdPayload {
  id: string;
}

/* Models */

/**
 * List Item Data Model
 */
export interface IListItemData {
  /** Id of item */
  id: string;
  /** Value held by item */
  value: string;
}

/**
 * List Item Flags Model
 */
export interface IListItemFlags {
  /** Shows whether item is opened for editation */
  isBeingEdited: boolean;
}

/**
 * Merged Item data with Flags
 */
export interface IItemViewModel {
  /** Guid of item */
  guid: string;
  /** Value held by item */
  value: string;
  /** Shows whether item is opened for editation */
  isBeingEdited: boolean;
}

export interface IReducer<T> {
  (state: T, action: IAction<ItemPayload & IdPayload>): T;
}

export namespace Reducer {
  export type Root = IReducer<Store.Root>;
  export type Items = IReducer<Store.Items>;
  export type Ids = IReducer<Store.Ids>;
  export type Data = IReducer<Store.Data>;
  export type Flags = IReducer<Store.Flags>;
}

export namespace Store {
  export interface Root {
    items: Items;
  }

  export interface Items {
    ids: Ids;
    data: Data;
    flags: Flags;
  }

  export type Ids = List<string>;
  export type Data = Map<string, IListItemData>;
  export type Flags = Map<string, IListItemFlags>;
}

