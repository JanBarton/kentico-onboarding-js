import {List, Map, Record} from 'immutable';

/**
 * Action generated by user
 */
export interface IAction<T> {
  /** Type of action */
  type: string;
  /** Data passed with action */
  payload: T;
}

/* Payload interfaces */

export interface ItemPayload {
  item: IListItemData;
}

export interface IdPayload {
  id: string;
}

/* Models */

/**
 * List Item Data Model
 */
export interface IListItemData extends Record<string, any> {
  /** Id of item */
  id: string;
  /** Value held by item */
  value: string;
}

/**
 * List Item Flags Model
 */
export interface IListItemFlags extends Record<string, any> {
  /** Shows whether item is opened for editation */
  isBeingEdited: boolean;
}

/**
 * Merged Item data with Flags
 */
export interface IItemViewModel {
  /** Guid of item */
  guid: string;
  /** Value held by item */
  value: string;
  /** Shows whether item is opened for editation */
  isBeingEdited: boolean;
}

/* Stores */

/**
 * Holds all stores used in application
 */
export namespace Store {
  export interface IRoot {
    items: IItems;
  }

  export interface IItems {
    ids: IIds;
    data: IData;
    flags: IFlags;
  }

  export type IIds = List<string>;
  export type IData = Map<string, IListItemData>;
  export type IFlags = Map<string, IListItemFlags>;
}

/* Reducers */

/**
 * Represents a generic reducer
 * @param state - state of reducer that is handled and returned
 * @param action - action to be executed
 */
export interface IReducer<T> {
  (state: T, action: IAction<ItemPayload & IdPayload>): T;
}

/**
 * Holds all reducers used in application
 */
export namespace Reducer {
  export type Root = IReducer<Store.IRoot>;
  export type Items = IReducer<Store.IItems>;
  export type Ids = IReducer<Store.IIds>;
  export type Data = IReducer<Store.IData>;
  export type Flags = IReducer<Store.IFlags>;
}
